generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Aircraft {
  id           String    @id @default(uuid()) @db.Uuid
  icaoCode     String    @db.VarChar(4)
  shortName    String
  fullName     String
  registration String    @unique
  selcal       String
  livery       String
  operatorId   String?   @db.Uuid
  operator     Operator? @relation(fields: [operatorId], references: [id])
  Flight       Flight[]

  @@map("aircraft")
}

model Airport {
  id                String              @id @default(uuid()) @db.Uuid
  icaoCode          String              @unique @db.VarChar(4)
  iataCode          String              @unique @db.VarChar(3)
  name              String
  city              String
  country           String
  timezone          String
  continent         Continent?
  location          Json                @default("{\"latitude\": 0, \"longitude\": 0}")
  AirportsOnFlights AirportsOnFlights[]

  @@map("airport")
}

model Operator {
  id        String     @id @default(uuid()) @db.Uuid
  icaoCode  String     @db.VarChar(4)
  shortName String
  fullName  String
  callsign  String
  aircrafts Aircraft[]
  flights   Flight[]

  @@map("operator")
}

model Flight {
  id              String              @id @default(uuid()) @db.Uuid
  flightNumber    String
  callsign        String
  status          String
  aircraftId      String              @db.Uuid
  timesheet       Json
  loadsheets      Json                @default("{\"final\": null, \"preliminary\": null}")
  operatorId      String              @db.Uuid
  rotationId      String?             @db.Uuid
  createdAt       DateTime            @default(now())
  positionReports Json                @default("[]")
  aircraft        Aircraft            @relation(fields: [aircraftId], references: [id])
  operator        Operator            @relation(fields: [operatorId], references: [id])
  rotation        Rotation?           @relation(fields: [rotationId], references: [id])
  User            User?
  airports        AirportsOnFlights[]
  FlightEvent     FlightEvent[]

  @@map("flight")
}

model AirportsOnFlights {
  airportId   String  @db.Uuid
  flightId    String  @db.Uuid
  airportType String
  airport     Airport @relation(fields: [airportId], references: [id])
  flight      Flight  @relation(fields: [flightId], references: [id])

  @@id([airportId, flightId])
  @@map("airport_flight")
}

model User {
  id              String            @id @default(uuid()) @db.Uuid
  name            String
  email           String            @unique
  password        String
  role            UserRole
  pilotLicenseId  String?           @db.VarChar(8)
  currentFlightId String?           @unique @db.Uuid
  JwtRefreshToken JwtRefreshToken[]
  Rotation        Rotation[]
  currentFlight   Flight?           @relation(fields: [currentFlightId], references: [id])
  FlightEvent     FlightEvent[]

  @@map("user")
}

model Rotation {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  pilotId   String    @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  flights   Flight[]
  pilot     User      @relation(fields: [pilotId], references: [id])

  @@map("rotation")
}

model JwtRefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  token     String   @unique
  createdAt DateTime
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@map("jwt_refresh_token")
}

model FlightEvent {
  id        String           @id @default(uuid()) @db.Uuid
  scope     FlightEventScope
  type      String
  payload   Json             @default("{}")
  flightId  String           @db.Uuid
  actorId   String?          @db.Uuid
  createdAt DateTime         @default(now())
  flight    Flight           @relation(fields: [flightId], references: [id])
  actor     User?            @relation(fields: [actorId], references: [id])

  @@map("flight_event")
}

enum UserRole {
  CabinCrew
  Operations
  Admin
}

enum FlightEventScope {
  system
  operations
  user
}

enum Continent {
  africa
  asia
  europe
  north_america
  south_america
  oceania
}
